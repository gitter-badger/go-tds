// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProviderInfo struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProviderInfo) Reset()         { *m = ProviderInfo{} }
func (m *ProviderInfo) String() string { return proto.CompactTextString(m) }
func (*ProviderInfo) ProtoMessage()    {}
func (*ProviderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *ProviderInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderInfo.Unmarshal(m, b)
}
func (m *ProviderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderInfo.Marshal(b, m, deterministic)
}
func (m *ProviderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderInfo.Merge(m, src)
}
func (m *ProviderInfo) XXX_Size() int {
	return xxx_messageInfo_ProviderInfo.Size(m)
}
func (m *ProviderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderInfo proto.InternalMessageInfo

func (m *ProviderInfo) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ProviderInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ProviderInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type JoinResult struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinResult) Reset()         { *m = JoinResult{} }
func (m *JoinResult) String() string { return proto.CompactTextString(m) }
func (*JoinResult) ProtoMessage()    {}
func (*JoinResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *JoinResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinResult.Unmarshal(m, b)
}
func (m *JoinResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinResult.Marshal(b, m, deterministic)
}
func (m *JoinResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinResult.Merge(m, src)
}
func (m *JoinResult) XXX_Size() int {
	return xxx_messageInfo_JoinResult.Size(m)
}
func (m *JoinResult) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinResult.DiscardUnknown(m)
}

var xxx_messageInfo_JoinResult proto.InternalMessageInfo

func (m *JoinResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type ReportResult struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportResult) Reset()         { *m = ReportResult{} }
func (m *ReportResult) String() string { return proto.CompactTextString(m) }
func (*ReportResult) ProtoMessage()    {}
func (*ReportResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

func (m *ReportResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportResult.Unmarshal(m, b)
}
func (m *ReportResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportResult.Marshal(b, m, deterministic)
}
func (m *ReportResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportResult.Merge(m, src)
}
func (m *ReportResult) XXX_Size() int {
	return xxx_messageInfo_ReportResult.Size(m)
}
func (m *ReportResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReportResult proto.InternalMessageInfo

func (m *ReportResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*ProviderInfo)(nil), "proto.ProviderInfo")
	proto.RegisterType((*JoinResult)(nil), "proto.JoinResult")
	proto.RegisterType((*ReportResult)(nil), "proto.ReportResult")
}

func init() {
	proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd)
}

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x77, 0x57, 0x2d, 0xeb, 0x58, 0x17, 0x1c, 0x41, 0x16, 0x4f, 0x25, 0x88, 0x78, 0xea,
	0xa1, 0xde, 0x8a, 0x17, 0x0f, 0x62, 0xf5, 0x20, 0x25, 0xfa, 0x02, 0xed, 0x76, 0x94, 0x01, 0x9b,
	0x84, 0x24, 0xcd, 0x03, 0xf8, 0xe4, 0xd2, 0xe9, 0x16, 0x73, 0x90, 0x9e, 0x32, 0xf9, 0x32, 0xf9,
	0xf3, 0x4d, 0xe0, 0x7c, 0x4d, 0x21, 0x2c, 0xbe, 0x68, 0xec, 0xbc, 0x8d, 0x16, 0x4f, 0x64, 0x51,
	0x1f, 0x30, 0x9c, 0x7b, 0x9b, 0x78, 0x45, 0xfe, 0xc5, 0x7c, 0x5a, 0x1c, 0xc1, 0x59, 0x20, 0x9f,
	0xb8, 0xa3, 0xb7, 0xc5, 0x9a, 0xda, 0x72, 0x54, 0xde, 0x9d, 0xea, 0x1c, 0x61, 0x03, 0x15, 0xbb,
	0xb6, 0x92, 0x83, 0x8a, 0x1d, 0x22, 0x1c, 0x3b, 0xeb, 0x63, 0x7b, 0x24, 0x44, 0x6a, 0x75, 0x03,
	0xf0, 0x6a, 0xd9, 0x68, 0x0a, 0x9b, 0xef, 0x88, 0x57, 0x30, 0xf0, 0x52, 0x49, 0x5c, 0xad, 0xfb,
	0x9d, 0xba, 0x85, 0xa1, 0xa6, 0x6d, 0xff, 0xe1, 0xbe, 0xc9, 0x4f, 0x09, 0xb5, 0xa6, 0x8e, 0x38,
	0x91, 0xc7, 0x29, 0x34, 0xdb, 0xe8, 0xf7, 0x9d, 0xd1, 0x6c, 0xb3, 0xc4, 0xcb, 0xdd, 0x44, 0xe3,
	0x7c, 0x8e, 0xeb, 0x8b, 0x1e, 0xfe, 0x69, 0xa8, 0x02, 0xa7, 0xfb, 0x07, 0x1f, 0xbb, 0xc8, 0x89,
	0xfe, 0xbf, 0xb9, 0x87, 0xb9, 0x9a, 0x2a, 0x26, 0x33, 0xa8, 0x9f, 0xcc, 0x6a, 0x6e, 0xd9, 0x44,
	0x7c, 0x80, 0xe6, 0x99, 0x62, 0xaf, 0x20, 0xdf, 0x76, 0x30, 0x29, 0x87, 0xaa, 0x58, 0x0e, 0x84,
	0xde, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x43, 0x26, 0xa8, 0x7c, 0x91, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReceiverClient is the client API for Receiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReceiverClient interface {
	JoinServiceHub(ctx context.Context, in *ProviderInfo, opts ...grpc.CallOption) (*JoinResult, error)
	ReportActive(ctx context.Context, in *ProviderInfo, opts ...grpc.CallOption) (*ReportResult, error)
}

type receiverClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverClient(cc grpc.ClientConnInterface) ReceiverClient {
	return &receiverClient{cc}
}

func (c *receiverClient) JoinServiceHub(ctx context.Context, in *ProviderInfo, opts ...grpc.CallOption) (*JoinResult, error) {
	out := new(JoinResult)
	err := c.cc.Invoke(ctx, "/proto.Receiver/JoinServiceHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverClient) ReportActive(ctx context.Context, in *ProviderInfo, opts ...grpc.CallOption) (*ReportResult, error) {
	out := new(ReportResult)
	err := c.cc.Invoke(ctx, "/proto.Receiver/ReportActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServer is the server API for Receiver service.
type ReceiverServer interface {
	JoinServiceHub(context.Context, *ProviderInfo) (*JoinResult, error)
	ReportActive(context.Context, *ProviderInfo) (*ReportResult, error)
}

// UnimplementedReceiverServer can be embedded to have forward compatible implementations.
type UnimplementedReceiverServer struct {
}

func (*UnimplementedReceiverServer) JoinServiceHub(ctx context.Context, req *ProviderInfo) (*JoinResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinServiceHub not implemented")
}
func (*UnimplementedReceiverServer) ReportActive(ctx context.Context, req *ProviderInfo) (*ReportResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportActive not implemented")
}

func RegisterReceiverServer(s *grpc.Server, srv ReceiverServer) {
	s.RegisterService(&_Receiver_serviceDesc, srv)
}

func _Receiver_JoinServiceHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).JoinServiceHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Receiver/JoinServiceHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).JoinServiceHub(ctx, req.(*ProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receiver_ReportActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).ReportActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Receiver/ReportActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).ReportActive(ctx, req.(*ProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Receiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Receiver",
	HandlerType: (*ReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinServiceHub",
			Handler:    _Receiver_JoinServiceHub_Handler,
		},
		{
			MethodName: "ReportActive",
			Handler:    _Receiver_ReportActive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// EndPointClient is the client API for EndPoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndPointClient interface {
	GetServiceInfo(ctx context.Context, in *ProviderInfo, opts ...grpc.CallOption) (*ProviderInfo, error)
}

type endPointClient struct {
	cc grpc.ClientConnInterface
}

func NewEndPointClient(cc grpc.ClientConnInterface) EndPointClient {
	return &endPointClient{cc}
}

func (c *endPointClient) GetServiceInfo(ctx context.Context, in *ProviderInfo, opts ...grpc.CallOption) (*ProviderInfo, error) {
	out := new(ProviderInfo)
	err := c.cc.Invoke(ctx, "/proto.EndPoint/GetServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndPointServer is the server API for EndPoint service.
type EndPointServer interface {
	GetServiceInfo(context.Context, *ProviderInfo) (*ProviderInfo, error)
}

// UnimplementedEndPointServer can be embedded to have forward compatible implementations.
type UnimplementedEndPointServer struct {
}

func (*UnimplementedEndPointServer) GetServiceInfo(ctx context.Context, req *ProviderInfo) (*ProviderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}

func RegisterEndPointServer(s *grpc.Server, srv EndPointServer) {
	s.RegisterService(&_EndPoint_serviceDesc, srv)
}

func _EndPoint_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndPointServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndPoint/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndPointServer).GetServiceInfo(ctx, req.(*ProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndPoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EndPoint",
	HandlerType: (*EndPointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _EndPoint_GetServiceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
